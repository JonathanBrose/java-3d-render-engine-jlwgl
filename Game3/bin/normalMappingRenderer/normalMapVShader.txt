#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;
in vec3 tangent;

const int maxLights=4;

out vec2 pass_textureCoordinates;
out vec3 toLightVector[maxLights];
out vec3 toCameraVector;
out float visibility;
out vec4 shadowCoords;
out float isUnderWater;


uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPositionEyeSpace[maxLights];
uniform mat4 toShadowSpace;
uniform float numberOfRows;
uniform vec2 offset;
uniform vec4 plane;
uniform float underwaterDensity;
uniform float underwaterGradient;
uniform float underwaterheight;
uniform bool underwater;

const float density = 0.004;
const float gradient = 1.5;
const float shadowDistance = 150.0;
const float transitionDistance = 10.0;

void main(void){
	
	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	shadowCoords = toShadowSpace * worldPosition;
	if(worldPosition.y < underwaterheight){
		isUnderWater = 1;
		}else {
		isUnderWater = 0;
		}
	gl_ClipDistance[0] = dot(worldPosition, plane);
	mat4 modelViewMatrix = viewMatrix * transformationMatrix;
	vec4 positionRelativeToCam = modelViewMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * positionRelativeToCam;
	
	pass_textureCoordinates = (textureCoordinates/numberOfRows) + offset;
	
	vec3 surfaceNormal = (modelViewMatrix * vec4(normal,0.0)).xyz;
	
	vec3 norm = normalize(surfaceNormal);
	vec3 tang = normalize((modelViewMatrix * vec4(tangent, 0.0)).xyz);
	vec3 bitang = normalize(cross(norm, tang));
	
	mat3 toTangentSpace = mat3(
		tang.x, bitang.x, norm.x,
		tang.y, bitang.y, norm.y,
		tang.z, bitang.z, norm.z
	);
	
	for(int i=0;i<maxLights;i++){
		toLightVector[i] = toTangentSpace * (lightPositionEyeSpace[i] - positionRelativeToCam.xyz);
	}
	toCameraVector = toTangentSpace * (-positionRelativeToCam.xyz);
	
	float distance = length(positionRelativeToCam.xyz);
	if(underwater && isUnderWater == 1){
			visibility = exp(-pow((distance*underwaterDensity),underwaterGradient));
			visibility = clamp(visibility,0.0,1.0);
		}else{
			visibility = exp(-pow((distance*density),gradient));
			visibility = clamp(visibility,0.0,1.0);
		}
		
	
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	shadowCoords.w = clamp(1.0 -distance,0.0,1.0);
	
}