#version 400 core

const int maxLights=4;

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector[maxLights];
in vec3 toCameraVector;
in float visibility;
in vec4 shadowCoords;
in float isUnderWater;
in vec4 clipSpace;
in float CausticsUnderwater;
in float causticsDensity;

layout (location = 0) out vec4 out_Color;
layout (location = 1) out vec4 out_BrightColor;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;
uniform sampler2D shadowMap;
uniform sampler2D beamerTexture;
uniform sampler2D projectionTexture;
uniform vec3 lightColour[maxLights];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;
uniform vec3 attenuation[maxLights];
uniform float mapSize;
uniform bool celShading;
uniform bool underwater;
uniform vec3 underwaterColor;
uniform sampler2D depthMap;


const float levels = 11.0;
const int pcfCount=4;
const float totalTexels = (pcfCount* 2.0+1.0)*(pcfCount* 2.0+1.0);
const float beamrepeat =16000;

void main(void){
	vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 +0.5;
	vec4 beamColour = texture(beamerTexture, vec2(ndc.x*beamrepeat, ndc.y*beamrepeat));
	
	
	float texelSize = 1.0 / mapSize;
	float total = 0.0;
	
	for(int x = - pcfCount; x<pcfCount; x++){
		for(int y = - pcfCount; y<pcfCount; y++){
			float objectNearestLight = texture(shadowMap, shadowCoords.xy+vec2(x,y)*texelSize).r;
			if(shadowCoords.z > objectNearestLight+0.004){
				total+=1.0;
			}
		}	
	}
	total/= totalTexels;

	
	float lightFactor =1.0- (total * shadowCoords.w);
			
	
	

	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);

	vec4 blendMapColour = texture(blendMap, pass_textureCoordinates);
	
	float backTextureAmount = 1 - (blendMapColour.r + blendMapColour.g + blendMapColour.b);
	vec2 tiledCoords = pass_textureCoordinates * 40.0;
	vec4 backgroundTextureColour = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColour = texture(rTexture,tiledCoords) * blendMapColour.r;
	vec4 gTextureColour = texture(gTexture,tiledCoords) * blendMapColour.g;
	vec4 bTextureColour = texture(bTexture,tiledCoords) * blendMapColour.b;
	
	vec4 totalColor = backgroundTextureColour + rTextureColour + gTextureColour + bTextureColour;
	
	vec3 unitNormal = normalize(surfaceNormal);
	
	
	for(int i =0; i<maxLights;i++){
	float distance = length(toLightVector[i]);
	float attFactor = attenuation[i].x + (attenuation[i].y * distance) +(attenuation[i].z * distance);
	
	vec3 unitLightVector = normalize(toLightVector[i]);
	
	float nDotl = dot(unitNormal,unitLightVector);
	float brightness = max(nDotl,0.0);
	if(celShading){
	float level = floor(brightness * levels);
	brightness = level/levels;
	}
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	if(celShading){
	float level = floor(dampedFactor * levels);
	dampedFactor = level/levels;
	}
	totalDiffuse = totalDiffuse + (brightness * lightColour[i])/attFactor;
	totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i])/attFactor;
	}
	totalDiffuse = max(totalDiffuse * lightFactor , 0.4);

	out_Color =  vec4(totalDiffuse,1.0) * totalColor + vec4(totalSpecular,1.0);
	
//	if(depthData.r == 1 && depthData.g ==1 && depthData.b ==1 && depthData.a ==1){
	if( CausticsUnderwater ==1 ){	
		out_Color = mix(beamColour, out_Color, causticsDensity);
	}
	if(isUnderWater == 1 && underwater){
		
		out_Color = mix(vec4(underwaterColor,1.0),out_Color, visibility);
	}else {
		out_Color = mix(vec4(skyColor,1.0),out_Color, visibility);
	}
	out_BrightColor = vec4(0.0);
	
	
}